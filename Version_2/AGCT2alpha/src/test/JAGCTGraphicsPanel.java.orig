package test;

import gene.Gene;
import gui.JConfig;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.util.Vector;
import javax.swing.JPanel;

public class JAGCTGraphicsPanel extends JPanel implements MouseListener,
        MouseMotionListener, MouseWheelListener, KeyListener, ComponentListener,
        Debuggable {

    private static double RATIO_ZOOM = 1.2;
    private static int ALPHA_MIN = 2;
    private static int OFFSET_MIN = 10;
    static int SPLIT_POINTS = 20;
    private static final int SENSITIVITY = 3;
    static final float MIN_STROKE = 1.0F;
    static final float MAX_STROKE = 1.5F;
    JAGCTVisualizationPane myVisualizationPane;
    public View3D myView3D;
    AGCT myAGCT;
    Domain myDomain;
    private String myName;
    int pointRadius = 2, pointSquare = 4, pMouseX, pMouseY, deltaX, deltaY,
            zoomingFactor;
    int xOffset, yOffset;
    Pnt3D reference_Pnt3D;
    // point around which are made all rotations
    private String currentView;
    int hierarchyP, hierarchyF, hierarchyC;
    boolean plotAvailable, showVarIds = true, zooming, dragging;
    // plotAvailable = false when no plot is possible
    private static final Color myColor = Color.BLACK;
    static final Color highlightColor = Color.orange; // Color.red;
    private static final Color paramColor = Color.blue;
    private static final Color structColor = Color.lightGray; // Color.green;
    // public static final Color[] referencedColors = { Color.green, Color.red,
    // Color.blue, Color.orange, Color.blue, Color.magenta, Color.darkGray,
    // darkGoldenRod, darkSalmon, Color.pink };
    public static final Color[] referencedColors = {new Color(0xFF0000),
        new Color(0xAA0055), new Color(0x5500AA), new Color(0x0000FF),
        Color.green, Color.red, Color.blue, Color.orange, Color.blue,
        Color.magenta, Color.darkGray, darkGoldenRod, darkSalmon, Color.pink};
    public static final Color[] responsiveGeneColors = {new Color(0x00FF00),
        new Color(0x55DD00), new Color(0xAAAA00), new Color(0xFF8800),
        Color.green, Color.red, Color.blue, Color.orange, Color.blue,
        Color.magenta, Color.darkGray, darkGoldenRod, darkSalmon, Color.pink};

    /*
     * {aquaMarine , bisque , brown , chartreuse , coral , darkGoldenRod ,
     * darkOliveGreen , darkSalmon , midnightBlue , peru } ;
     */
    private static Color bufferedGenesColor = peru;
    private static Color positiveCorrelationColor = Color.green;
    private static Color negativeCorrelationColor = Color.red;
    static Color minColor = new Color(240, 240, 240);
    private int index_data_pointed;

    JAGCTGraphicsPanel(JAGCTVisualizationPane myj, AGCT a, Domain d, String name) {
        Pnt3D[] pt;

        myVisualizationPane = myj;

        currentView = JAGCTVisualizationPane.allViews[0]; // Change if not XYZ !

        plotAvailable = false;
        myAGCT = a;
        myDomain = d;
        myName = name;

        pt = JAGCTVisualizationPane.getViewPoint(currentView);
        if (pt[1] == null) {
            myView3D = new View3D(pt[0], this);
        } else {
            myView3D = new View3D(pt[0], pt[1], this);
        }

        // myView3D.setPerspective(false);
        reference_Pnt3D = Pnt3D.o;

        zooming = false;
        dragging = false;

        index_data_pointed = -1;
        hierarchyP = hierarchyF = hierarchyC = JAGCTVisualizationPane.DEFAULT_HIERARCHY_LEVEL;
    }

    @Override
    protected void paintComponent(Graphics g) {
        myView3D.setGraphics(g, getWidth(), getHeight());
        if (!plotAvailable) {
            g.drawString("No visualisation possible: no data processed", 20, 20);
        } else {
            super.paintComponent(g);

            if (zooming) {
                myView3D.zoom(Math.pow(1.01, -zoomingFactor));
                zooming = false;
            }

            if (dragging) {
                myView3D.pan(deltaX, deltaY);
                myView3D.adjustCamera(JAGCTGraphicsPanel.SENSITIVITY * deltaX,
                        JAGCTGraphicsPanel.SENSITIVITY * deltaY);

                if ((!myVisualizationPane.myReferenceName.equals(JAGCTVisualizationPane.C_C_P))
                        && (AGCT.Sort_Depth)) {
                    myVisualizationPane.updateDepth(myView3D);
                }
                dragging = false;
            }

            myView3DUpdateDepth();

            if (!(myVisualizationPane.myReferenceName.equals(JAGCTVisualizationPane.C_C_P))
                    && (myAGCT.myClusteringProfileFrame.atLeastTwoGenes())) {
                drawListGenes(g);
            }

            plotPointsAndEdges(g);
            if (myVisualizationPane.myReferenceName.equals(JAGCTVisualizationPane.C_C_P)) {
                drawEdgesFeatures(g);
            }

            // frank
            if (myAGCT.data.isDrawFrame()) {
                drawStructure(g);
            }

            if (!(myVisualizationPane.myReferenceName.equals(JAGCTVisualizationPane.C_C_P))
                    && (myVisualizationPane.clusterStructure.isSelected())) {
                myVisualizationPane.plotClustering(g);
            }
        }
    }

    void hiPlus() {
        if ((hierarchyP != hierarchyF) || (hierarchyF != hierarchyC)) {
            Matrix.perror("JAGCTGraphicsPanel.class :: different hierarchies values");
        }
        if (hierarchyF < myDomain.maxHierarchy - 1) {
            hierarchyF++;
            hierarchyP++;
            hierarchyC++;
        }
    }

    void hiMinus() {
        if ((hierarchyP != hierarchyF) || (hierarchyF != hierarchyC)) {
            Matrix.perror("JAGCTGraphicsPanel.class :: different hierarchies values");
        }
        if (hierarchyF > -1) {
            hierarchyF--;
            hierarchyP--;
            hierarchyC--;
        }
    }

    Rectangle getCaptureRectangle() {
        Rectangle bounds = getBounds();
        bounds.setLocation(getLocationOnScreen());
        return bounds;
    }

    void initAll(boolean zoom, boolean xO, boolean yO) {
        if (plotAvailable == true) {
        }
    }

    void changeView(int i) {
        currentView = JAGCTVisualizationPane.allViews[i];
        Pnt3D[] pt = JAGCTVisualizationPane.getViewPoint(currentView);
        if (pt[1] == null) {
            myView3D.set(new View3DInfo(pt[0], false));
        } else {
            myView3D.set(new View3DInfo(pt[0], pt[1], false));
        }

        // myView3D.set(new
        // View3DInfo(JAGCTVisualizationPane.getViewPoint(currentView), false));

        repaint();
    }

    void setDomain(Domain d) {
        myDomain = d;
    }

    @Override
    public void mousePressed(MouseEvent e) {
        pMouseX = e.getX();
        pMouseY = e.getY();
        requestFocus();
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        pMouseX = e.getX();
        pMouseY = e.getY();
        dragging = true;
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        if (index_data_pointed >= 0) {
            xOffset = yOffset = 0;
            reference_Pnt3D = myVisualizationPane.getRightPoint(index_data_pointed);
            myVisualizationPane.searchIndex = index_data_pointed;
            repaint();
        }
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_T) {
            AGCT.Show_Only_Genes_With_Visible_Edge = !AGCT.Show_Only_Genes_With_Visible_Edge;
        } else {
            keyReleased(e);
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        if (e.getComponent() != this) {
            return;
        }

        if (e.getKeyCode() == KeyEvent.VK_UP) {
            up();
        } else if (e.getKeyCode() == KeyEvent.VK_DOWN) {
            down();
        } else if (e.getKeyCode() == KeyEvent.VK_LEFT) {
            left();
        } else if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
            right();
        } else if (e.getKeyCode() == KeyEvent.VK_ENTER) {
            xOffset = yOffset = 0;
            reference_Pnt3D = Pnt3D.o;
            myVisualizationPane.searchIndex = -1;
        } else if (e.getKeyCode() == KeyEvent.VK_F1) {
            adjustScales();
        } else if (e.getKeyCode() == KeyEvent.VK_Z) {
            zoomIn();
        } else if (e.getKeyCode() == KeyEvent.VK_A) {
            zoomOut();
        } else if (e.getKeyCode() == KeyEvent.VK_C) {
            AGCT.Show_Correlation++;
            if (AGCT.Show_Correlation >= 2) {
                AGCT.Show_Correlation = -1;
            }
        } else if (e.getKeyCode() == KeyEvent.VK_G) {
            if ((!myVisualizationPane.myReferenceName.equals(JAGCTVisualizationPane.C_C_P))
                    && (index_data_pointed != -1)) {
                myAGCT.myClusteringProfileFrame.addGene(index_data_pointed);
                myAGCT.myClusteringProfileFrame.goPlotGenes();
            }
        } else if (e.getKeyCode() == KeyEvent.VK_F) {
            myAGCT.myClusteringProfileFrame.flushGenes();
            myAGCT.myClusteringProfileFrame.repaint();
        }
        repaint();
    }

    @Override
    public void keyTyped(KeyEvent e) {
        char c = e.getKeyChar();

        if (c == ' ') {
            myAGCT.data.setDrawFrame(!myAGCT.data.isDrawFrame());
        }

        if (c == 'x') {
            myAGCT.data.setReflectionX(!myAGCT.data.isReflectionX());
        }

        if (c == 'y') {
            myAGCT.data.setReflectionY(!myAGCT.data.isReflectionY());
        }

        if (c == 'z') {
            myAGCT.data.setReflectionZ(!myAGCT.data.isReflectionZ());
        }

    }

    @Override
    public void mouseDragged(MouseEvent e) {
        myView3D.initDepth();

        int cMouseX, cMouseY;

        cMouseX = e.getX();
        cMouseY = e.getY();

        deltaX = (cMouseX - pMouseX);
        deltaY = (cMouseY - pMouseY);

        pMouseX = cMouseX;
        pMouseY = cMouseY;

        dragging = true;

        repaint();
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        if (plotAvailable) {
            pMouseX = e.getX();
            pMouseY = e.getY();

            Point q = new Point(pMouseX, pMouseY);
            int dcur, dmin = 0;
            Point pnt;
            int oi = -1, i, j, id, step = 0;
            Gene gg;
            String s1 = "";

            for (i = 0; i < myVisualizationPane.getTotalFeatures(); i++) {
                id = myVisualizationPane.getRightIndex(i);
                if ((myVisualizationPane.myReferenceName.equals(JAGCTVisualizationPane.C_C_P))
                        || ((JAnnotationFrame.prototypeIsDisplayed(myAGCT, id)) && (myVisualizationPane.genePlottedCluster(id)))) {

                    pnt = myView3D.toPointVsRef(myVisualizationPane.getRightPoint(id));
                    dcur = ((pnt.x - (q.x + xOffset)) * (pnt.x - (q.x + xOffset)))
                            + ((pnt.y - (q.y + yOffset)) * (pnt.y - (q.y + yOffset)));

                    if ((step == 0) || (dcur < dmin)) {
                        oi = id;
                        dmin = dcur;
                    }
                    step++;
                }
            }

            if ((oi != -1) && (index_data_pointed != oi)) {
                index_data_pointed = oi;
                s1 = "";

                if (myVisualizationPane.myReferenceName.equals(JAGCTVisualizationPane.C_C_P)) {
                    s1 = "Variable pointed: "
                            + myVisualizationPane.getFeatureName(index_data_pointed);
                    JInformationFrame.getInstance().setText(s1);
                } else if ((myVisualizationPane.myReferenceName.equals(JAGCTVisualizationPane.P_P))
                        || (myVisualizationPane.myReferenceName.equals(JAGCTVisualizationPane.M_P))) {
                    gg = (Gene) myDomain.getGenes().get(
                            myDomain.selectedGeneNumberToGeneNumber[oi]);

                    myAGCT.displayHTMLGene(gg);
                }
                repaint();
            }
        }
    }

    @Override
    public void mouseWheelMoved(MouseWheelEvent e) {
        zooming = true;
        int r = e.getWheelRotation();
        if (r < 0) {
            zoomingFactor = -SENSITIVITY;
        } else if (r > 0) {
            zoomingFactor = SENSITIVITY;
        }
        repaint();
    }

    @Override
    public void componentHidden(ComponentEvent e) {
    }

    @Override
    public void componentMoved(ComponentEvent e) {
    }

    @Override
    public void componentResized(ComponentEvent e) {
        initAll(true, true, true);
        myView3D.initDepth();
    }

    @Override
    public void componentShown(ComponentEvent e) {
    }


    private void modifyHierarchy(int v) {
        hierarchyP = hierarchyF = hierarchyC = v;

        help();
    }

    private void drawListGenes(Graphics g) {
        Vector lg = myAGCT.myClusteringProfileFrame.getListGenes();
        Domain d = myAGCT.data.getMyDomain();
        int i, j, num1, num2;
        Color old;
        Pnt3D p1, p2;
        old = g.getColor();

        System.out.println("Frank: Draw list genes");

        Graphics2D g2d = (Graphics2D) g;
        g2d.setStroke(new BasicStroke(2));

        if (!myAGCT.Use_Shadow) {
            g.setColor(JAGCTGraphicsPanel.bufferedGenesColor);
        }
        for (i = 0; i < lg.size() - 1; i++) {
            num1 = ((Integer) lg.get(i)).intValue();
            num2 = ((Integer) lg.get(i + 1)).intValue();
            p1 = myVisualizationPane.getRightPoint(num1);
            p2 = myVisualizationPane.getRightPoint(num2);// gene1,gene2 のもともとの点
            if (AGCT.Use_Shadow) {
                myView3D.drawShadowLineVsRef(p1, p2, JAGCTGraphicsPanel.minColor,
                        JAGCTGraphicsPanel.bufferedGenesColor, true);
            } else {
                myView3D.drawLineVsRef(p1, p2, -1, false);
            }
        }
        g.setColor(old);

        g2d.setStroke(new BasicStroke());
    }

    private void myView3DUpdateDepth() {
        // System.out.println("Frank: myView3DUpdateDepth");
        if (myVisualizationPane.myReferenceName.equals(JAGCTVisualizationPane.C_C_P)) {
            myView3D.minDepth = -1.0;
            myView3D.maxDepth = 1.0;
        } else {
            int i;
            myView3D.initDepth();
            for (i = 0; i < myVisualizationPane.getTotalFeatures(); i++) {
                myView3D.updateDepth(myVisualizationPane.getRightPoint(i));
            }
        }
    }

    private void drawEdgesFeatures(Graphics g) {
        if (plotAvailable) {
            Pnt3D pt;
            for (int i = 0; i < myAGCT.data.getFeature_pca_Pnt3D().size(); i++) {
                pt = (Pnt3D) myAGCT.data.getFeature_pca_Pnt3D().get(i);
                if (i != index_data_pointed) {
                    myView3D.drawShadowLineVsRef(Pnt3D.o, pt,
                            JAGCTGraphicsPanel.minColor, Color.black, true);
                } else {
                    myView3D.drawShadowLineVsRef(Pnt3D.o, pt,
                            JAGCTGraphicsPanel.minColor, highlightColor, true);
                }
            }

            if ((ControlProcess.hasTrue("softClusteringProcessed") || ControlProcess.hasTrue("hardClusteringProcessed"))
                    && (myVisualizationPane.memberships.isSelected())
                    && (myVisualizationPane.currentClustering > -1)) {
                Pnt3D pcl = new Pnt3D();
                double norm;
                Clustering cc = myAGCT.getClustering(myVisualizationPane.currentClustering);

                for (int i = 0; i < cc.nclusters; i++) {
                    pcl.coordinates[0] = cc.VV.get(i, myVisualizationPane.xAxis);
                    pcl.coordinates[1] = cc.VV.get(i, myVisualizationPane.yAxis);
                    pcl.coordinates[2] = cc.VV.get(i, myVisualizationPane.zAxis);

                    norm = Math.sqrt(pcl.dot(pcl));
                    pcl.coordinates[0] /= norm;
                    pcl.coordinates[1] /= norm;
                    pcl.coordinates[2] /= norm;

                    g.setColor(new Color(cc.redCluster[i], cc.greenCluster[i],
                            cc.blueCluster[i]));
                    myView3D.drawLineVsRef(Pnt3D.o, pcl, -1, false);

                    if (showVarIds) {
                        myView3D.drawStringVsRef("Cluster_" + i, pcl);
                    }
                }
            }
        }
    }

    private void plotPointsAndEdges(Graphics g) {

        // if (AGCT.MYDEBUG)
        // AGCT.debug("JAGCTGraphicsPanel.plotPointsAndEdges");

        //		int id;
        Pnt3D point, p2;

        Gene gene;
        Color prevc, nextc, color = null;
        boolean dum = false;
        double nangle;
        if (plotAvailable == true) {
            for (int ii = 0; ii < myVisualizationPane.getTotalFeatures(); ii++) {
                final int id = myVisualizationPane.getRightIndex(ii);
                if ((myVisualizationPane.myReferenceName.equals(JAGCTVisualizationPane.C_C_P))
                        || ((JAnnotationFrame.prototypeIsDisplayed(myAGCT, id)) && (myVisualizationPane.genePlottedCluster(id)))) {
                    point = myVisualizationPane.getRightPoint(id);

                    boolean vetoTriangulated;
                    boolean vetoEdges;
                    boolean vetoRef = false;
                    vetoTriangulated = false;
                    vetoEdges = false;
                    if (!myVisualizationPane.myReferenceName.equals(JAGCTVisualizationPane.C_C_P)) {
                        gene = ((Gene) myDomain.getGenes().get(
                                myDomain.selectedGeneNumberToGeneNumber[id]));
                        color = null;
                        if (gene.isReferenced()) {
                            color = JAGCTGraphicsPanel.referencedColors[gene.getTypeReferenced()];
                        }

                        if ((!myView3D.isHighlight()) || (!gene.isReferenced())) {
                            vetoRef = true;
                        }

                        vetoEdges = ((myView3D.onlyReferencedEdges) && (!Prototype.geneOrNeighborsIsReferencedPrototype(myAGCT, id)));

                        if ((AGCT.Show_Only_Genes_With_Visible_Edge)
                                && (myAGCT.data.isTriangulated())) {
                            vetoTriangulated = true;
                            if ((gene.neighbors != null) && (!vetoEdges)) {
                                for (int j = 0; j < gene.neighbors.size(); j++) {
                                    p2 = myVisualizationPane.getRightPoint(((Integer) gene.neighbors.get(j)).intValue());
                                    if (Statistics.isPositiveDelauney(gene, j)
                                            && (AGCT.Show_Correlation != 0)) {
                                        vetoTriangulated = false;
                                        break;
                                    } else if (Statistics.isNegativeDelauney(gene, j)
                                            && (AGCT.Show_Correlation != 1)) {
                                        vetoTriangulated = false;
                                        break;
                                    }
                                }
                            }
                        }
                    } else {
                        color = Color.black;
                        //						gene = null;
                        gene = ((Gene) myDomain.getGenes().get(
                                myDomain.selectedGeneNumberToGeneNumber[id]));
                        if (gene == null && AGCT.MYDEBUG) {
                            AGCT.debug("gene=null!");
                        }
                    }

                    if ((!myVisualizationPane.myReferenceName.equals(JAGCTVisualizationPane.C_C_P))
                            && (myAGCT.data.getAllClusterings() != null)
                            && (myAGCT.data.getAllClusterings().size() > 0)
                            && (myVisualizationPane.currentClustering > -1)
                            && ((ControlProcess.hasTrue("softClusteringProcessed")) || (ControlProcess.hasTrue("hardClusteringProcessed")))) {
                        gene = ((Gene) myDomain.getGenes().get(
                                myDomain.selectedGeneNumberToGeneNumber[id]));
                        plotMemberships(g, gene, point);
                    }

                    setRightFontAndColor(g, id);
                    if ((!AGCT.Use_Shadow) || (id == index_data_pointed)) {
                        // if (AGCT.MYDEBUG)
                        // AGCT.debug(gene);
                        myView3D.drawPointVsRef(point, id, id == index_data_pointed,
                                vetoRef, vetoTriangulated, color, gene);
                    } else {
                        myView3D.drawShadowPntVsRef(point, id, JAGCTGraphicsPanel.minColor,
                                myColor, vetoRef, vetoTriangulated, color, gene);// myView3D.drawShadowLineVsRef(p,
                    }					// p,
                    // JAGCTGraphicsPanel.minColor,
                    // myColor,
                    // true);
                    if (myVisualizationPane.myReferenceName.equals(JAGCTVisualizationPane.C_C_P)) {
                        dum = true;
                    } else if ((id != index_data_pointed)
                            || (!myVisualizationPane.stars.isSelected())) {
                        dum = true;
                    } else {
                        dum = false;
                    }

                    if ((showVarIds) && (dum) && (!vetoTriangulated)) {
                        myVisualizationPane.drawLabelVsRef(myView3D, id, this, true);
                    }
                    if ((!myVisualizationPane.myReferenceName.equals(JAGCTVisualizationPane.C_C_P))
                            && (!myAGCT.data.isTriangulationTimerIsTicking())) {
                        gene = ((Gene) myDomain.getGenes().get(
                                myDomain.selectedGeneNumberToGeneNumber[id]));

                        if ((myDomain.myEdges != null)
                                && (gene.neighbors != null)
                                && (((myVisualizationPane.informationManifold.equals(JAGCTVisualizationPane.allManifoldButtonString)) //										&& (!vetoEdges)
                                ) || ((myVisualizationPane.informationManifold.equals(JAGCTVisualizationPane.onlyPointedButtonString)) && (id == index_data_pointed)))) {

                            for (int j = 0; j < gene.neighbors.size(); j++) {
                                if (gene.isVisible()
                                        && myAGCT.data.getMyDomain().getGenes().get(
                                        myAGCT.data.getMyDomain().selectedGeneNumberToGeneNumber[(Integer) gene.neighbors.get(j)]).isVisible()) {

                                    p2 = myVisualizationPane.getRightPoint(((Integer) gene.neighbors.get(j)).intValue());
                                    if (id == index_data_pointed) {
                                        if (AGCT.Use_Shadow) {
                                            myView3D.drawShadowLineVsRef(point, p2,
                                                    JAGCTGraphicsPanel.minColor, highlightColor, true);
                                        } else {
                                            prevc = g.getColor();
                                            g.setColor(highlightColor);
                                            myView3D.drawLineVsRef(point, p2, -1, true);
                                            g.setColor(prevc);
                                        }
                                    } else {
                                        boolean okPlot = false;

                                        nangle = ((Double) gene.neighbor_angles.get(j)).doubleValue();
                                        prevc = g.getColor();
                                        nextc = null;
                                        // corel = 0;
                                        if (Statistics.isPositiveDelauney(gene, j)) {
                                            nextc = positiveCorrelationColor;
                                            okPlot = true;
//											 corel = 1;
                                        } else if (Statistics.isNegativeDelauney(gene, j)) {
                                            nextc = negativeCorrelationColor;
                                            okPlot = true;
                                            // corel = -1;
                                        }

                                        if ((AGCT.Show_Correlation == 1)
                                                && (nextc == negativeCorrelationColor)) {
                                            okPlot = false;
                                        } else if ((AGCT.Show_Correlation == 0)
                                                && (nextc == positiveCorrelationColor)) {
                                            okPlot = false;
                                        }

                                        if (okPlot) {
                                            g.setColor(nextc);
                                            if (AGCT.Use_Shadow) {
                                                myView3D.drawShadowLineVsRef(point, p2,
                                                        JAGCTGraphicsPanel.minColor, nextc, true);
                                            } else {
                                                myView3D.drawLineVsRef(point, p2, -1, true);
                                            }
                                        }
                                        g.setColor(prevc);

                                        /*
                                         * if (AGCT.Use_Shadow)
                                         * myView3D.drawShadowLineVsRef(p, p2,
                                         * JAGCTGraphicsPanel.minColor, myColor,
                                         * true); else myView3D.drawLineVsRef(p, p2,
                                         * -1, true);
                                         */

                                    }
                                }
                            }
                        }
                    }
                }
            }

            if (!myVisualizationPane.myReferenceName.equals(JAGCTVisualizationPane.C_C_P)) {
                final int id = index_data_pointed;
                if ((id != -1) && (JAnnotationFrame.prototypeIsDisplayed(myAGCT, id))) {
                    gene = ((Gene) myDomain.getGenes().get(
                            myDomain.selectedGeneNumberToGeneNumber[id]));
                    boolean vetoRef = false;
                    if ((!myView3D.isHighlight()) || (!gene.isReferenced()))// (
                    // (myView3D.onlyReferenced)
                    // &&
                    // (!gg.referenced)
                    // )
                    {
                        vetoRef = true;
                    }

                    if ((myDomain.myEdges != null)
                            && (gene.neighbors != null)
                            && (!myVisualizationPane.informationManifold.equals(JAGCTVisualizationPane.noPointedButtonString))) {
                        point = myVisualizationPane.getRightPoint(id);
                        for (int j = 0; j < gene.neighbors.size(); j++) {
                            p2 = myVisualizationPane.getRightPoint(((Integer) gene.neighbors.get(j)).intValue());
                            if (AGCT.Use_Shadow) {
                                myView3D.drawShadowLineVsRef(point, p2,
                                        JAGCTGraphicsPanel.minColor, highlightColor, true);
                            } else {
                                prevc = g.getColor();
                                g.setColor(highlightColor);
                                myView3D.drawLineVsRef(point, p2, -1, true);
                                g.setColor(prevc);
                            }
                        }
                    }
                }
            }

            g.setFont(JConfig.NORMAL_FONT);
            g.setColor(myColor);
        }
    }

    private void plotMemberships(Graphics g, Gene gg, Pnt3D p) {
        if (!gg.isVisible()) {
            return;
        }
        double beginAngle, widthAngle, totalProp, curProp, cm;
        int j;
        Clustering cc = myAGCT.getClustering(myVisualizationPane.currentClustering);

        if ((!myVisualizationPane.myReferenceName.equals(JAGCTVisualizationPane.C_C_P))
                && (myVisualizationPane.memberships.isSelected())) {

            if (myVisualizationPane.membershipViewSelect.getSelectedIndex() == 0) {
                totalProp = 0.0;
                for (j = 0; j < cc.nclusters; j++) {
                    cm = gg.getClusterMemberships(myVisualizationPane.currentClustering,
                            j);
                    totalProp += cm;
                }

                beginAngle = 0.0;
                for (j = 0; j < cc.nclusters; j++) {
                    curProp = gg.getClusterMemberships(
                            myVisualizationPane.currentClustering, j); // myAGCT.myClustering.myClusteringAlgorithm.soft_memberships.coordinates[j][id];
                    widthAngle = (360.0 * curProp / totalProp);
                    if (j == cc.nclusters) {
                        widthAngle = 360.0 - beginAngle;
                    }

                    g.setColor(clusterColor(p, new Color(cc.redCluster[j],
                            cc.greenCluster[j], cc.blueCluster[j])));

                    myView3D.fillArcVsRef(p, myVisualizationPane.radiusMemberships,
                            (int) beginAngle, (int) widthAngle);
                    beginAngle = beginAngle + widthAngle;
                }
            } else if (myVisualizationPane.membershipViewSelect.getSelectedIndex() == 1) {
                for (j = 0; j < cc.nclusters; j++) {
                    g.setColor(clusterColor(p, new Color(cc.redCluster[j],
                            cc.greenCluster[j], cc.blueCluster[j])));
                    cm = gg.getClusterMemberships(myVisualizationPane.currentClustering,
                            j);
                    myView3D.drawCircleVsRef(p,
                            (int) (((double) myVisualizationPane.radiusMemberships) * cm));
                }
            }
        }
    }

    private Color clusterColor(Pnt3D p, Color c) {

        if (!AGCT.Use_Shadow) {
            return c;
        } else {
            double prop = 1.0 - ((myView3D.clampDepth(p) - myView3D.minDepth) / (myView3D.maxDepth - myView3D.minDepth));
            if (prop < 0.0) {
                prop = 0.0;
            }
            if (prop > 1.0) {
                prop = 1.0;
            }

            double dr = (255.0 - (double) c.getRed()) * prop;
            double dg = (255.0 - (double) c.getGreen()) * prop;
            double db = (255.0 - (double) c.getBlue()) * prop;

            int vr, vg, vb;

            if (c.getRed() >= JAGCTVisualizationPane.Max_Shadow_Color) {
                vr = c.getRed();
            } else {
                vr = (int) (dr + (double) c.getRed());
                if (vr > JAGCTVisualizationPane.Max_Shadow_Color) {
                    vr = JAGCTVisualizationPane.Max_Shadow_Color;
                }
            }

            if (c.getGreen() >= JAGCTVisualizationPane.Max_Shadow_Color) {
                vg = c.getGreen();
            } else {
                vg = (int) (dg + (double) c.getGreen());
                if (vg > JAGCTVisualizationPane.Max_Shadow_Color) {
                    vg = JAGCTVisualizationPane.Max_Shadow_Color;
                }
            }

            if (c.getBlue() >= JAGCTVisualizationPane.Max_Shadow_Color) {
                vb = c.getBlue();
            } else {
                vb = (int) (db + (double) c.getBlue());
                if (vb > JAGCTVisualizationPane.Max_Shadow_Color) {
                    vb = JAGCTVisualizationPane.Max_Shadow_Color;
                }
            }

            Color cp = new Color(vr, vg, vb);

            return cp;
        }
    }

    private void setRightFontAndColor(Graphics g, int id) {
        g.setFont(JConfig.NORMAL_FONT);
        if ((!myVisualizationPane.myReferenceName.equals(JAGCTVisualizationPane.C_C_P))
                && (((myVisualizationPane.geneF.isSelected()) && (myVisualizationPane.geneF.isEnabled())) || ((myVisualizationPane.geneP.isSelected()) && (myVisualizationPane.geneP.isEnabled())))) {
            g.setFont(JConfig.SMALL_FONT);
        }
        g.setColor(myColor);

        if (id == myVisualizationPane.searchIndex) {
            g.setFont(JConfig.SEARCH_FONT);
            g.setColor(structColor);
        }

        if (id == index_data_pointed) {
            g.setFont(JConfig.HIGHLIGHT_FONT);
            g.setColor(highlightColor);
        }
    }

    private void up() {
        yOffset += OFFSET_MIN;
        repaint();
    }

    private void down() {
        yOffset -= OFFSET_MIN;
        repaint();
    }

    private void left() {
        xOffset += OFFSET_MIN;
        repaint();
    }

    private void right() {
        xOffset -= OFFSET_MIN;
        repaint();
    }

    private void drawStructure(Graphics g) {
        g.setColor(structColor);

        if (!AGCT.Perspective) {
            myView3D.drawStringVsRef("x", Pnt3D.i);
            myView3D.drawStringVsRef("y", Pnt3D.j);
            myView3D.drawStringVsRef("z", Pnt3D.k);

            if (AGCT.Use_Shadow) {
                myView3D.drawShadowLineVsRef(Pnt3D.o, Pnt3D.i,
                        JAGCTGraphicsPanel.minColor, structColor, false);
                myView3D.drawShadowLineVsRef(Pnt3D.o, Pnt3D.j,
                        JAGCTGraphicsPanel.minColor, structColor, false);
                myView3D.drawShadowLineVsRef(Pnt3D.o, Pnt3D.k,
                        JAGCTGraphicsPanel.minColor, structColor, false);
            } else {
                myView3D.drawLineVsRef(Pnt3D.o, Pnt3D.i, -1, true);
                myView3D.drawLineVsRef(Pnt3D.o, Pnt3D.j, -1, true);
                myView3D.drawLineVsRef(Pnt3D.o, Pnt3D.k, -1, true);
            }

            g.setColor(structColor);
            if (myVisualizationPane.myReferenceName.equals(JAGCTVisualizationPane.C_C_P)) {
                myView3D.drawCircleVsRef(Pnt3D.o, myView3D.v);
            }
        }

    }
    private void zoomIn() {
        zooming = true;
        zoomingFactor = SENSITIVITY;
        repaint();
    }

    private void zoomOut() {
        zooming = true;
        zoomingFactor = -SENSITIVITY;
        repaint();
    }

    private void adjustScales() {
        if ((xOffset < -getWidth() / 2) || (xOffset > getWidth() / 2)) {
            xOffset = 0;
        }
        if ((yOffset < -getHeight() / 2) || (yOffset > getHeight() / 2)) {
            yOffset = 0;
        }

        Thread t = new Thread() {

            public void run() {
                boolean inside, zoomIn = true, test = true, stop = false;
                Point pnt;
                int i;
                do {
                    inside = true;
                    i = 0;
                    do {
                        pnt = myView3D.toPointVsRef(myVisualizationPane.getRightPoint(i));
                        if ((pnt.x < 0) || (pnt.x > getWidth()) || (pnt.y < 0)
                                || (pnt.y > getHeight())) {
                            inside = false;
                        } else {
                            i++;
                        }
                    } while ((inside == true)
                            && (i < myVisualizationPane.getTotalFeatures()));
                    if (test == true) {
                        if (inside) {
                            zoomIn = true;
                        } else {
                            zoomIn = false;
                        }
                        test = false;
                    } else {
                        if ((zoomIn) && (inside)) {
                            zooming = true;
                            zoomingFactor = SENSITIVITY;
                            repaint();
                        } else if ((!zoomIn) && (!inside)) {
                            zooming = true;
                            zoomingFactor = -SENSITIVITY;
                            repaint();
                        } else {
                            stop = true;
                        }
                    }

                    try {
                        Thread.sleep(10);
                    } catch (Exception e) {
                    }
                } while (!stop);
            }
        };
        t.start();
    }

    private static void help() {
        System.out.println("Keys:");
        System.out.println("' ' toggle display of reference frame");
    }
}
